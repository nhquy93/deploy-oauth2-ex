{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { MovieType, tvType } from \"shared/enums\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst dbUrl = environment.apiConfig.apiUrl;\nconst apiKey = environment.apiConfig.apiKey;\nexport let HomeService = /*#__PURE__*/(() => {\n  class HomeService {\n    constructor(http) {\n      this.http = http;\n      this._movies$ = new Subject();\n      this._topMovies$ = new Subject();\n      this._tvSeries$ = new Subject();\n      this._topTvSeries$ = new Subject();\n      this._trailer$ = new Subject();\n      this._similar$ = new Subject();\n    }\n\n    fetchMovies(type, params = {}) {\n      return this.http.get(`${dbUrl}/movie/${type}`, {\n        params: {\n          page: 1,\n          api_key: apiKey\n        }\n      }).subscribe(response => {\n        switch (type) {\n          case MovieType.popular:\n            this._movies$.next(response === null || response === void 0 ? void 0 : response.results);\n\n            break;\n\n          default:\n            return this._topMovies$.next(response === null || response === void 0 ? void 0 : response.results);\n        }\n      });\n    }\n\n    fetchTvList(type, params = {}) {\n      return this.http.get(`${dbUrl}/tv/${type}`, {\n        params: {\n          api_key: apiKey\n        }\n      }).subscribe(response => {\n        switch (type) {\n          case tvType.popular:\n            this._tvSeries$.next(response === null || response === void 0 ? void 0 : response.results);\n\n            break;\n\n          default:\n            return this._topTvSeries$.next(response.results);\n        }\n      });\n    }\n\n    getTrailers(category, id) {\n      return this.http.get(`${dbUrl}/${category}/${id}/videos`, {\n        params: {\n          api_key: apiKey\n        }\n      }).subscribe(response => {\n        return this._trailer$.next(response === null || response === void 0 ? void 0 : response.results[0]);\n      });\n    }\n\n    getSimilar(category, id) {\n      return this.http.get(`${dbUrl}/${category}/${id}/similar`, {\n        params: {\n          api_key: apiKey\n        }\n      }).subscribe(response => {\n        return this._similar$.next(response === null || response === void 0 ? void 0 : response.results);\n      });\n    }\n\n  }\n\n  HomeService.ɵfac = function HomeService_Factory(t) {\n    return new (t || HomeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  HomeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HomeService,\n    factory: HomeService.ɵfac,\n    providedIn: 'root'\n  });\n  return HomeService;\n})();","map":null,"metadata":{},"sourceType":"module"}